generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int     @id @default(autoincrement())   // crud completed 
  firstname               String
  lastname                String 
  username                String  @unique()
  phone                   String  @unique()
  email                   String  @unique() 
  password                String  
  avatar                  String?
  isVerfied               Boolean?
  role                    UserRole 
  doctor                  Doctor? 
  patient                 Patient? 
  token                   Tokens?
}


model Tokens {                                                           // crud completed 
  id                      Int       @id @default(autoincrement())
  userId                  Int       @unique()
  user                    User      @relation(fields: [userId] , references: [id]) 
  refreshToken            String?  
  varificationToken       String?    // scrurity reson if someone somehow  steel  
  emailVarificationToken  DateTime?
  frogotPasswordToken     String?  
  frogotPasswordExpiry    DateTime?

}

enum UserRole {
  PATIENT 
  DOCTOR 
  ADMIN
}

model Doctor {                              
   id                  Int           @id @default(autoincrement())   // crud completed 
   experience          Int
   specializations     String[]
   qualification       String[]
   waitTime            String
   services            String[]
   languages           String[]
   availability        Boolean
   availableInHrs      Int 
   memberships         String[]
   about               String
   userId              Int           @unique
   user                User          @relation(fields: [userId], references: [id])
   appointments        Appointment[]
   DoctorAvailability  TimeSlot?

}

model TimeSlot {                                                           //crud completed 
  id                     Int        @id @default(autoincrement())
  doctor                 Doctor     @relation(fields: [doctorId], references: [id])
  doctorId               Int        @unique()
  days                   String[]
  startTime              DateTime    // doctor dutration start time like from 9:00 to 12:00 
  endTime                DateTime
  duration               Int   // full duriotion like 3 hrs 5 hr and so on 
  appointmentDuration    Int    // one patient checking duration can be 20 minuts or maybe more 
  recurring              Boolean
}


model Patient {                                                    
  id              Int           @id @default(autoincrement())
  contact         String
  dateOfBirth     DateTime
  userId          Int           @unique()
  user            User          @relation(fields: [userId], references: [id])
  appointments    Appointment[]
}

model Appointment {                    
  id                      Int               @id @default(autoincrement())
  doctor                  Doctor            @relation(fields: [doctorId], references: [id])
  doctorId                Int 
  patient                 Patient           @relation(fields: [patientId], references: [id])
  patientId               Int 
  doseDoctorAccepted      Boolean?
  date                    DateTime  // date and time  for what appointment booked like 2jan 24 5:30pm to 5:50pm
  status                  AppointmentStatus
  appointmentSlot         appointmentSlot?
 
}

model appointmentSlot {

   id              Int          @id @default(autoincrement()) 
   appointmentId   Int          @unique() // one booked appointment can have one time slot like 5:30 to 5:50
   appointment     Appointment  @relation(fields: [appointmentId] , references: [id])
   checkinTime     DateTime     // the time patient meant to start his checkup 
   checkoutTime    DateTime     // the time patient ment to end his checkup 


}

enum AppointmentStatus {
  PENDING
  SCHEDULED
  FULLFILLED
  CANCELED
}





