generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User { 

  id                      Int     @id @default(autoincrement())   
  firstname               String
  lastname                String 
  username                String  @unique()
  phone                   String  @unique()
  email                   String  @unique() 
  password                String  
  avatar                  String?
  isVerfied               Boolean?
  role                    UserRole 
  doctor                  Doctor? 
  patient                 Patient? 
  token                   Tokens?

}

model Tokens { 

  id                      Int       @id @default(autoincrement())
  userId                  Int       @unique()
  user                    User      @relation(fields: [userId] , references: [id]) 
  refreshToken            String?  
  varificationToken       String?    // scrurity reson if someone somehow  steel  
  emailVarificationToken  DateTime?
  frogotPasswordToken     String?  
  frogotPasswordExpiry    DateTime?

}

enum UserRole {
  PATIENT 
  DOCTOR 
  ADMIN
}

model Doctor { 

   id                  Int           @id @default(autoincrement())   
   experience          Int
   specializations     String[]
   qualification       String[]
   waitTime            String
   services            String[]
   languages           String[]
   memberships         String[]
   about               String
   userId              Int           @unique()
   user                User          @relation(fields: [userId], references: [id])
   appointments        Appointment[]
   DoctorAvailability  TimeSlot?
   slotTimestamps      slotTimestemps[]

}

model TimeSlot { 

  id                     Int        @id @default(autoincrement())
  doctor                 Doctor     @relation(fields: [doctorId], references: [id])
  doctorId               Int        @unique()
  availabilitydays       String[]
  startTime              DateTime   // doctor dutration start time like from 9:00 to 12:00 
  endTime                DateTime
  duration               Int?      // full duriotion like 60mins to how much doctor can  and so on 
  appointmentDuration    Int       // one patient checking duration can be 20 minuts or maybe more 
  recurring              Boolean? @default(true)
  slotTimestamps         slotTimestemps[]


}

model slotTimestemps {  // this table row will be updated every day so this is just for reseduling not for saving data permanntly 

  id                     Int          @id @default(autoincrement())
  doctor                 Doctor       @relation(fields: [doctorId], references: [id])
  doctorId               Int     
  slotId                 Int
  slot                   TimeSlot     @relation(fields: [slotId] ,references: [id])     
  startTime              DateTime?  
  endTime                DateTime?   
  createdAt              DateTime     @default(now())
  updatedAt              DateTime?    
  booked                 Boolean      @default(false)
  requestedToBook        Boolean      @default(false)
  patientId              Int?        
  //when patient request to book this  timestemp  we always wanna make sure hes same patient who requested 
  // to book by storing his id here  

  
}

model Patient { 

  id              Int           @id @default(autoincrement())
  contact         String
  dateOfBirth     DateTime
  userId          Int           @unique()
  user            User          @relation(fields: [userId], references: [id])
  appointments    Appointment[]

}

model Appointment { 

  id                      Int               @id @default(autoincrement())
  doctor                  Doctor            @relation(fields: [doctorId], references: [id])
  doctorId                Int 
  patient                 Patient           @relation(fields: [patientId], references: [id])
  patientId               Int 
  doseDoctorAccepted      Boolean?
  statusByDoctor          appointmentStatus?  
  statusByPatient         appointmentStatusByPatient? // patient will confirm appointment secduling 
  createdAt               DateTime           @default(now())
  checkinTime             DateTime     // the time patient ment to start his checkup 
  checkoutTime            DateTime     // the time patient ment to end his checkup 
 
}



enum appointmentStatus {
  PENDING
  SCHEDULED
  FULLFILLED
  CANCELED
}


enum appointmentStatusByPatient {
  PENDING
  SCHEDULED
  FULLFILLED
  CANCELED
}



  


