generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int  @id @default(autoincrement())
  firstname               String
  lastname                String 
  username                String @unique()
  phone                   String @unique()
  email                   String @unique() 
  password                String 
  avatar                  String?
  refreshToken            String?  
  varificationToken       String? // scrurity reson if someone somehow  steel  
  isVerfied               Boolean?
  emailVarificationToken  DateTime?
  role                    UserRole 
  frogotPasswordToken     String?  
  frogotPasswordExpiry    DateTime?
  doctor                  Doctor? 
  patient                 Patient? 
}

enum UserRole {
  PATIENT 
  DOCTOR 
}

model Doctor {
   id                  Int  @id @default(autoincrement())  
   experience          Int
   specializations     String[]
   qualification       String[]
   waitTime            String
   services            String[]
   languages           String[]
   availability        Boolean
   availableInHrs      Int 
   memberships         String[]
   about               String
   userId              Int @unique
   user                User @relation(fields: [userId], references: [id])
   appointments        Appointment[]
   DoctorAvailability  TimeSlot?

}

model TimeSlot {
  id       Int      @id @default(autoincrement())
  doctor   Doctor  @relation(fields: [doctorId], references: [id])
  doctorId Int     @unique()
  days     String[]
  startTime DateTime @unique()
  endTime   DateTime
  duration Int
  recurring Boolean
}


model Patient {
  id           Int  @id @default(autoincrement())
  contact      String
  dateOfBirth  DateTime
  userId       Int @unique
  user         User @relation(fields: [userId], references: [id])
  appointments Appointment[]
}

model Appointment {
  id        Int            @id @default(autoincrement())
  doctor    Doctor            @relation(fields: [doctorId], references: [id])
  doctorId  Int 
  patient   Patient           @relation(fields: [patientId], references: [id])
  patientId Int 
  date      DateTime  // date and time  for what appointment booked like 2jan 24 5:30pm to 5:50pm
  status    AppointmentStatus
 
}

enum AppointmentStatus {
  PENDING
  SCHEDULED
  COMPLETED
  CANCELED
}





